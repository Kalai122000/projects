#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define a structure for Book
typedef struct Book {
    char title[50];
    char author[50];
    int publicationYear;
    int isAvailable;
    int catalogNumber;
} Book;

// Define a structure for Member
typedef struct Member {
    char name[50];
    char email[50];
    int membershipID;
} Member;

// Define a structure for Transaction
typedef struct Transaction {
    int bookCatalogNumber;
    int memberID;
    char transactionType[10]; // "Borrow" or "Return"
} Transaction;

// Define a structure for Library
typedef struct Library {
    Book books[100];
    int numBooks;
    Member members[100];
    int numMembers;
    Transaction transactions[100];
    int numTransactions;
} Library;

// Function to add a book to the library
void addBook(Library* library) {
    if (library->numBooks < 100) {
        printf("Enter book title: ");
        scanf("%s", library->books[library->numBooks].title);
        printf("Enter book author: ");
        scanf("%s", library->books[library->numBooks].author);
        printf("Enter book publication year: ");
        scanf("%d", &library->books[library->numBooks].publicationYear);
        library->books[library->numBooks].isAvailable = 1;
        library->books[library->numBooks].catalogNumber = library->numBooks + 1; // Assign catalog number
        library->numBooks++;
        printf("Book added successfully!\n");
    } else {
        printf("Library is full!\n");
    }
}

// Function to display all books in the library
void displayBooks(Library* library) {
    if (library->numBooks == 0) {
        printf("No books in the library!\n");
    } else {
        printf("Books in the library:\n");
        for (int i = 0; i < library->numBooks; i++) {
            printf("Catalog Number: %d\n", library->books[i].catalogNumber);
            printf("Title: %s\n", library->books[i].title);
            printf("Author: %s\n", library->books[i].author);
            printf("Publication Year: %d\n", library->books[i].publicationYear);
            printf("Availability: %s\n", library->books[i].isAvailable ? "Yes" : "No");
            printf("\n");
        }
    }
}

// Function to search for a book by title
void searchBookByTitle(Library* library) {
    char title[50];
    printf("Enter book title: ");
    scanf("%s", title);
    int found = 0;
    for (int i = 0; i < library->numBooks; i++) {
        if (strcmp(library->books[i].title, title) == 0) {
            printf("Book found!\n");
            printf("Catalog Number: %d\n", library->books[i].catalogNumber);
            printf("Title: %s\n", library->books[i].title);
            printf("Author: %s\n", library->books[i].author);
            printf("Publication Year: %d\n", library->books[i].publicationYear);
            printf("Availability: %s\n", library->books[i].isAvailable ? "Yes" : "No");
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("Book not found!\n");
    }
}

// Function to register a new member
void registerMember(Library* library) {
    if (library->numMembers < 100) {
        printf("Enter member name: ");
        scanf("%s", library->members[library->numMembers].name);
        printf("Enter member email: ");
        scanf("%s", library->members[library->numMembers].email);
        library->members[library->numMembers].membershipID = library->numMembers + 1; // Assign membership ID
        library->numMembers++;
        printf("Member registered successfully!\n");
    } else {
        printf("Maximum number of members reached!\n");
    }
}

// Function to display all members
void displayMembers(Library* library) {
    if (library->numMembers == 0) {
        printf("No members registered!\n");
    } else {
        printf("Registered members:\n");
        for (int i = 0; i < library->numMembers; i++) {
            printf("Membership ID: %d\n", library->members[i].membershipID);
            printf("Name: %s\n", library->members[i].name);
            printf("Email: %s\n", library->members[i].email);
            printf("\n");
        }
    }
}

// Function to borrow a book
void borrowBook(Library* library) {
    int catalogNumber;
    int memberID;
    printf("Enter book catalog number: ");
    scanf("%d", &catalogNumber);
    printf("Enter member ID: ");
    scanf("%d", &memberID);

    // Check if book exists and is available
    int bookIndex = -1;
    for (int i = 0; i < library->numBooks; i++) {
        if (library->books[i].catalogNumber == catalogNumber) {
            bookIndex = i;
            break;
        }
    }
    if (bookIndex == -1 || !library->books[bookIndex].isAvailable) {
        printf("Book not available or does not exist!\n");
        return;
    }

    // Check if member exists
    int memberIndex = -1;
    for (int i = 0; i < library->numMembers; i++) {
        if (library->members[i].membershipID == memberID) {
            memberIndex = i;
            break;
        }
    }
    if (memberIndex == -1) {
        printf("Member not found!\n");
        return;
    }

    // Mark book as borrowed and record transaction
    library->books[bookIndex].isAvailable = 0;
    library->transactions[library->numTransactions].bookCatalogNumber = catalogNumber;
    library->transactions[library->numTransactions].memberID = memberID;
    strcpy(library->transactions[library->numTransactions].transactionType, "Borrow");
    library->numTransactions++;
    printf("Book borrowed successfully!\n");
}

// Function to return a book
void returnBook(Library* library) {
    int catalogNumber;
    int memberID;
    printf("Enter book catalog number: ");
    scanf("%d", &catalogNumber);
    printf("Enter member ID: ");
    scanf("%d", &memberID);

    // Check if book exists and is borrowed by the member
    int bookIndex = -1;
    for (int i = 0; i < library->numBooks; i++) {
        if (library->books[i].catalogNumber == catalogNumber) {
            bookIndex = i;
            break;
        }
    }
    if (bookIndex == -1 || library->books[bookIndex].isAvailable) {
        printf("Book is not borrowed or does not exist!\n");
        return;
    }

    // Check if member exists and has borrowed the book
    int memberIndex = -1;
    for (int i = 0; i < library->numMembers; i++) {
        if (library->members[i].membershipID == memberID) {
            memberIndex = i;
            break;
        }
    }
    if (memberIndex == -1) {
        printf("Member not found!\n");
        return;
    }

    // Mark book as available and record transaction
    library->books[bookIndex].isAvailable = 1;
    library->transactions[library->numTransactions].bookCatalogNumber = catalogNumber;
    library->transactions[library->numTransactions].memberID = memberID;
    strcpy(library->transactions[library->numTransactions].transactionType, "Return");
    library->numTransactions++;
    printf("Book returned successfully!\n");
}

// Function to display transaction history
void displayTransactions(Library* library) {
    if (library->numTransactions == 0) {
        printf("No transactions recorded!\n");
    } else {
        printf("Transaction history:\n");
        for (int i = 0; i < library->numTransactions; i++) {
            printf("Transaction Type: %s\n", library->transactions[i].transactionType);
            printf("Book Catalog Number: %d\n", library->transactions[i].bookCatalogNumber);
            printf("Member ID: %d\n", library->transactions[i].memberID);
            printf("\n");
        }
    }
}

int main() {
    Library library;
    library.numBooks = 0;
    library.numMembers = 0;
    library.numTransactions = 0;

    while (1) {
        printf("Library Management System\n");
        printf("1. Add Book\n");
        printf("2. Display Books\n");
        printf("3. Search Book by Title\n");
        printf("4. Register Member\n");
        printf("5. Display Members\n");
        printf("6. Borrow Book\n");
        printf("7. Return Book\n");
        printf("8. Display Transactions\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addBook(&library);
                break;
            case 2:
                displayBooks(&library);
                break;
            case 3:
                searchBookByTitle(&library);
                break;
            case 4:
                registerMember(&library);
                break;
            case 5:
                displayMembers(&library);
                break;
            case 6:
                borrowBook(&library);
                break;
            case 7:
                returnBook(&library);
                break;
            case 8:
                displayTransactions(&library);
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
